{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'TaskList',\n  data() {\n    return {\n      tasks: [],\n      loading: false,\n      error: ''\n    };\n  },\n  computed: {\n    sortedTasks() {\n      return [...this.tasks].sort((a, b) => {\n        // Ordenar primero por estado (pendientes primero)\n        if (a.completed !== b.completed) {\n          return a.completed ? 1 : -1;\n        }\n        // Luego por ID (más recientes primero)\n        return b.id - a.id;\n      });\n    }\n  },\n  methods: {\n    async fetchTasksFromApi() {\n      this.loading = true;\n      this.error = '';\n      try {\n        const response = await axios.get('https://dummyjson.com/todos');\n        this.tasks = response.data.todos.map(task => ({\n          ...task,\n          todo: task.todo || task.title // Manejar diferentes formatos de API\n        }));\n      } catch (err) {\n        this.error = 'Error al cargar las tareas. Por favor, intente nuevamente.';\n        console.error('Error:', err);\n      } finally {\n        this.loading = false;\n      }\n    },\n    toggleTask(task) {\n      task.completed = !task.completed;\n    },\n    deleteTask(task) {\n      const index = this.tasks.findIndex(t => t.id === task.id);\n      if (index > -1) {\n        this.tasks.splice(index, 1);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","tasks","loading","error","computed","sortedTasks","sort","a","b","completed","id","methods","fetchTasksFromApi","response","get","todos","map","task","todo","title","err","console","toggleTask","deleteTask","index","findIndex","t","splice"],"sources":["src/views/TaskList.vue"],"sourcesContent":["<template>\r\n    <div class=\"container py-4\">\r\n      <h2 class=\"text-center mb-4\">Lista de Tareas</h2>\r\n      \r\n      <!-- Botón para cargar tareas de la API -->\r\n      <div class=\"d-flex justify-content-end mb-3\">\r\n        <button \r\n          class=\"btn btn-primary\"\r\n          @click=\"fetchTasksFromApi\"\r\n          :disabled=\"loading\"\r\n        >\r\n          <i class=\"bi bi-cloud-download me-2\"></i>\r\n          {{ loading ? 'Cargando...' : 'Cargar Tareas de API' }}\r\n        </button>\r\n      </div>\r\n  \r\n      <!-- Indicador de carga -->\r\n      <div v-if=\"loading\" class=\"text-center my-4\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Cargando...</span>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- Mensaje de error -->\r\n      <div v-if=\"error\" class=\"alert alert-danger\" role=\"alert\">\r\n        {{ error }}\r\n        <button type=\"button\" class=\"btn-close float-end\" @click=\"error = ''\"></button>\r\n      </div>\r\n  \r\n      <!-- Lista de tareas -->\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <div class=\"card\">\r\n            <div class=\"card-body\">\r\n              <div v-if=\"tasks.length === 0 && !loading\" class=\"text-center text-muted my-4\">\r\n                No hay tareas disponibles. Carga algunas desde la API.\r\n              </div>\r\n              <div v-else class=\"list-group\">\r\n                <div \r\n                  v-for=\"task in sortedTasks\" \r\n                  :key=\"task.id\"\r\n                  class=\"list-group-item list-group-item-action\"\r\n                  :class=\"{'bg-light': task.completed}\"\r\n                >\r\n                  <div class=\"d-flex justify-content-between align-items-center\">\r\n                    <div class=\"form-check\">\r\n                      <input\r\n                        type=\"checkbox\"\r\n                        class=\"form-check-input\"\r\n                        :checked=\"task.completed\"\r\n                        @change=\"toggleTask(task)\"\r\n                      />\r\n                      <label\r\n                        class=\"form-check-label ms-2\"\r\n                        :class=\"{'text-decoration-line-through': task.completed}\"\r\n                      >\r\n                        {{ task.todo }}\r\n                      </label>\r\n                    </div>\r\n                    <div class=\"d-flex align-items-center\">\r\n                      <span \r\n                        class=\"badge me-2\"\r\n                        :class=\"task.completed ? 'bg-success' : 'bg-warning'\"\r\n                      >\r\n                        {{ task.completed ? 'Completada' : 'Pendiente' }}\r\n                      </span>\r\n                      <button\r\n                        class=\"btn btn-outline-danger btn-sm\"\r\n                        @click=\"deleteTask(task)\"\r\n                      >\r\n                        <i class=\"bi bi-trash\"></i>\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                  <small class=\"text-muted d-block mt-1\">\r\n                    ID: {{ task.id }}\r\n                  </small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from 'axios';\r\n  \r\n  export default {\r\n    name: 'TaskList',\r\n    data() {\r\n      return {\r\n        tasks: [],\r\n        loading: false,\r\n        error: ''\r\n      };\r\n    },\r\n    computed: {\r\n      sortedTasks() {\r\n        return [...this.tasks].sort((a, b) => {\r\n          // Ordenar primero por estado (pendientes primero)\r\n          if (a.completed !== b.completed) {\r\n            return a.completed ? 1 : -1;\r\n          }\r\n          // Luego por ID (más recientes primero)\r\n          return b.id - a.id;\r\n        });\r\n      }\r\n    },\r\n    methods: {\r\n      async fetchTasksFromApi() {\r\n        this.loading = true;\r\n        this.error = '';\r\n        \r\n        try {\r\n          const response = await axios.get('https://dummyjson.com/todos');\r\n          this.tasks = response.data.todos.map(task => ({\r\n            ...task,\r\n            todo: task.todo || task.title // Manejar diferentes formatos de API\r\n          }));\r\n        } catch (err) {\r\n          this.error = 'Error al cargar las tareas. Por favor, intente nuevamente.';\r\n          console.error('Error:', err);\r\n        } finally {\r\n          this.loading = false;\r\n        }\r\n      },\r\n  \r\n      toggleTask(task) {\r\n        task.completed = !task.completed;\r\n      },\r\n  \r\n      deleteTask(task) {\r\n        const index = this.tasks.findIndex(t => t.id === task.id);\r\n        if (index > -1) {\r\n          this.tasks.splice(index, 1);\r\n        }\r\n      },\r\n    }\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .list-group-item {\r\n    transition: all 0.3s ease;\r\n  }\r\n  \r\n  .list-group-item:hover {\r\n    transform: translateX(5px);\r\n  }\r\n  \r\n  .btn-outline-danger {\r\n    opacity: 0.7;\r\n  }\r\n  \r\n  .btn-outline-danger:hover {\r\n    opacity: 1;\r\n  }\r\n  \r\n  .form-check-label {\r\n    cursor: pointer;\r\n  }\r\n  \r\n  .badge {\r\n    transition: all 0.3s ease;\r\n  }\r\n  </style>"],"mappings":"AAuFA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,OAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACAC,YAAA;MACA,gBAAAJ,KAAA,EAAAK,IAAA,EAAAC,CAAA,EAAAC,CAAA;QACA;QACA,IAAAD,CAAA,CAAAE,SAAA,KAAAD,CAAA,CAAAC,SAAA;UACA,OAAAF,CAAA,CAAAE,SAAA;QACA;QACA;QACA,OAAAD,CAAA,CAAAE,EAAA,GAAAH,CAAA,CAAAG,EAAA;MACA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,kBAAA;MACA,KAAAV,OAAA;MACA,KAAAC,KAAA;MAEA;QACA,MAAAU,QAAA,SAAAf,KAAA,CAAAgB,GAAA;QACA,KAAAb,KAAA,GAAAY,QAAA,CAAAb,IAAA,CAAAe,KAAA,CAAAC,GAAA,CAAAC,IAAA;UACA,GAAAA,IAAA;UACAC,IAAA,EAAAD,IAAA,CAAAC,IAAA,IAAAD,IAAA,CAAAE,KAAA;QACA;MACA,SAAAC,GAAA;QACA,KAAAjB,KAAA;QACAkB,OAAA,CAAAlB,KAAA,WAAAiB,GAAA;MACA;QACA,KAAAlB,OAAA;MACA;IACA;IAEAoB,WAAAL,IAAA;MACAA,IAAA,CAAAR,SAAA,IAAAQ,IAAA,CAAAR,SAAA;IACA;IAEAc,WAAAN,IAAA;MACA,MAAAO,KAAA,QAAAvB,KAAA,CAAAwB,SAAA,CAAAC,CAAA,IAAAA,CAAA,CAAAhB,EAAA,KAAAO,IAAA,CAAAP,EAAA;MACA,IAAAc,KAAA;QACA,KAAAvB,KAAA,CAAA0B,MAAA,CAAAH,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}